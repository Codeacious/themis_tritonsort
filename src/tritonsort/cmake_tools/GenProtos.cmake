# Generate C++ and Python for a protocol buffer(s)

FIND_PACKAGE(Protobuf REQUIRED)
INCLUDE_DIRECTORIES(${PROTOBUF_INCLUDE_DIRS})

FIND_PROGRAM(PROTOBUF_PROTOC_EXECUTABLE protoc)

FUNCTION(GEN_PROTOS LIBNAME CPP_GEN_DIR PY_GEN_DIR)
  IF (NOT ARGN)
    MESSAGE(FATAL_ERROR "GEN_PROTO called without any proto files")
    RETURN()
  ENDIF(NOT ARGN)
  FILE(MAKE_DIRECTORY ${CPP_GEN_DIR} ${PY_GEN_DIR})
  FOREACH(PROTO_FILE ${ARGN})
    GET_FILENAME_COMPONENT(ABS_PROTO_FILE ${PROTO_FILE} ABSOLUTE)
    GET_FILENAME_COMPONENT(PROTO_FILE_BASENAME ${PROTO_FILE} NAME_WE)
    
    ADD_CUSTOM_COMMAND(OUTPUT ${CPP_GEN_DIR}/${PROTO_FILE_BASENAME}.pb.cc ${CPP_GEN_DIR}/${PROTO_FILE_BASENAME}.pb.h ${PY_GEN_DIR}/${PROTO_FILE_BASENAME}_pb2.py
      COMMAND ${PROTOBUF_PROTOC_EXECUTABLE} --cpp_out=${CPP_GEN_DIR} --python_out=${PY_GEN_DIR} --proto_path=${CMAKE_CURRENT_BINARY_DIR} --proto_path=${CMAKE_CURRENT_SOURCE_DIR} ${ABS_PROTO_FILE}
      COMMENT "Compiling protocol buffer ${PROTO_FILE}")
    LIST(APPEND PROTO_CC_FILES ${CPP_GEN_DIR}/${PROTO_FILE_BASENAME}.pb.cc ${CPP_GEN_DIR}/${PROTO_FILE_BASENAME}.pb.h)
  ENDFOREACH(PROTO_FILE)
  
  ADD_LIBRARY(${LIBNAME} STATIC ${PROTO_CC_FILES})
  
ENDFUNCTION(GEN_PROTOS)
