#ifndef TRITONSORT_GLOB_H
#define TRITONSORT_GLOB_H

#include <list>
#include <string>

#include "core/constants.h"

class File;

/**
   A wrapper around standard shell globbing that differentiates between files
   and directories and provides File objects for files.
 */
class Glob {
public:
  /// Constructor
  /**
     The provided pattern will be evaluated when this object is constructed.

     \param globPattern the glob pattern to match against
   */
  Glob(const std::string& globPattern);

  /// Constructor
  /**
     The provided patterns will be evaluated when this object is constructed.

     \param globPatternList a list of glob patterns to match against
   */
  Glob(const StringList& globPatternList);

  /// Destructor
  /**
     Clears the file list; it's the caller's responsibility to garbage collect
     the input file File*s generated by the glob at construction time
   */
  virtual ~Glob();

  /// Get files matched by this glob
  /**
     \return a list of file paths matched by the glob. The list may be empty if
     no files matched the provided glob(s)
   */
  const StringList& getFiles() const;

  /// Get directories matched by this glob
  /**
     \return a list of directory paths matched by the glob. The list may be
     empty if no directories matched the provided glob(s)
   */
  const StringList& getDirectories() const;
protected:
  /// The list of files matching the glob(s)
  StringList files;

  /// The list of directories matching the glob(s)
  StringList directories;

private:
  void globFiles(const std::string& globPattern);
};

#endif // TRITONSORT_GLOB_H
